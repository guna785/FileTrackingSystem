@{
    Layout = null;
}
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery _antiforgery
@{
    string tokenValue = _antiforgery.GetAndStoreTokens(Context).RequestToken;
}
@model FileTrackingSystem.BL.Models.JobPostViewModel
<style>
    /*the container must be positioned relative:*/
    .autocomplete {
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid transparent;
        background-color: #f1f1f1;
        padding: 10px;
        font-size: 16px;
    }

        input[type=text] {
            background-color: #f1f1f1;
            width: 100%;
        }

        input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
            cursor: pointer;
        }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            /*when hovering an item:*/
            .autocomplete-items div:hover {
                background-color: #e9e9e9;
            }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>
<div class="container-fluid">
    <div id="jobContainer" class="col-md-12">
        <form id="jobCreate" onsubmit="CreateJob();" action="javascript:void(0);">
            <input type="hidden" id="myToken" name="X-CSRF-TOKEN-Medical"
                   value="@tokenValue">
            <div class="form-group">
                <label>Search Existing Client</label>
                <div class="form-inline">
                    <div class="autocomplete" style="width:80%;">
                        <input asp-for="client" id="clients" type="text" name="client" autocomplete="off" placeholder="Search fo Clients">
                    </div> &nbsp; <a class="btn btn-primary" onclick="AddNew();" style="color:white;"><i class="fa fa-plus"></i></a>
                </div>
            </div>
            <div class="form-group">
                <label>Job Type</label>
                <select asp-for="jobtype" id="jobtype" class="form-control" style="width:80%;">
                    @foreach (var item in ViewBag.jobtype)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Amount</label>
                <input onchange="calculateTotalAmount();" asp-for="amount" id="amount" class="form-control" style="width:80%;" value="0" type="number" />

            </div>
            <div class="form-group">
                <label>Tax</label>
                <input onchange="calculateTotalAmount();" asp-for="tax" id="tax" class="form-control" style="width:80%;" value="0" type="number" />

            </div>
            <div class="form-group">
                <label>Toatal Amount</label>
                <input asp-for="totalAmount" readonly id="totalAmount" i class="form-control" style="width:80%;" value="0" type="number" />

            </div>
            <div class="form-group">
                <label>Advance Payment</label>
                <input asp-for="advanceAdmount" id="advanceAdmount" class="form-control" style="width:80%;" value="0" type="number" />

            </div>
            <input type="submit" class="btn btn-primary" value="Submit" />
        </form>

    </div>
    <div id="AddClient"></div>
</div>

<script>
    var CreateJob = function () {
        debugger
        var values = {
            client: $("#clients").val(),
            jobtype: $("#jobtype").val(),
            amount: $("#amount").val(),
            tax: $("#tax").val(),
            totalAmount: $("#totalAmount").val(),
            advanceAdmount: $("#advanceAdmount").val()
        }
        DoAction("CreateJob", values);
    }
    var calculateTotalAmount = function () {
        var amt = parseInt($("#amount").val());
        var tax = parseInt($("#tax").val());
        var totalAmount = amt + ((amt * tax) / 100);
        $("#totalAmount").val(totalAmount);
    }
    function AddNew() {
        $("#AddClient").load("/Home/PopUpModelShow/AddClient", function () {
            $("#jobContainer").hide();
            $("#AddClient").show();
            $("#mtitle").text("Add Client");
        });
    }
    var clientList = [];
    $("#jobContainer").show();
    $("#AddClient").hide();
    var fetchClients = function (value) {
        $.ajax({
            beforeSend: function (request) {
                request.setRequestHeader("X-CSRF-TOKEN-Medical", '@tokenValue')
            },
            url: "/Home/GetClients",
            dataType: 'json',
            type: 'post',
            contentType: 'application/json',
            data: JSON.stringify(value),
            processData: false,
            async: true,
            success: function (response) {
                console.log(response);
                clientList = response;
            },
            error: function (e) {

            }
        });
    }
    var autocomplete = function (inp) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            fetchClients(val);
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < clientList.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (clientList[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + clientList[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += clientList[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + clientList[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    fetchClients("");
    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("clients"));
</script>
